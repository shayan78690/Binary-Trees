class Solution {
    // Function to check whether all nodes of a tree have the value 
    // equal to the sum of their child nodes.
    public static int isSumProperty(Node root) {
        if (root == null || (root.left == null && root.right == null)) {
            return 1;
        }

        int sum = 0;
        if (root.left != null) {
            sum += root.left.data;
        }
        if (root.right != null) {
            sum += root.right.data;
        }

        if (root.data == sum 
            && isSumProperty(root.left) == 1 
            && isSumProperty(root.right) == 1) {
            return 1;
        } else {
            return 0;
        }
    }
}


















/****************************************************************

 Following is the class structure of the Node class:

 class Node {
     public int data;
     public Node left;
     public Node right;

     Node()
     {
         this.data = 0;
         this.left = null;
         this.right = null;
     }

     Node(int data)
     {
         this.data = data;
         this.left = null;
         this.right = null;
     }

     Node(int data, Node left, Node right)
     {
         this.data = data;
         this.left = left;
         this.right = right;
     }
 }

 *****************************************************************/
import java.util.*;
public class Solution {
    public static boolean isParentSum(Node root) {
        if(root == null) {
            return true;
        }
        Queue<Node> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()) {
            Node node = q.poll();
            if(node.left == null && node.right == null) {
                continue;
            }
            int sum = 0;
            if(node.left != null) {
                sum += node.left.data;
            }
            if(node.right != null) {
                sum += node.right.data;
            }

            if(sum != node.data) {
                return false;
            }

            if(node.left != null) {
                q.offer(node.left);
            }

            if(node.right != null) {
                q.offer(node.right);
            }
        }
        return true;
    }
}
