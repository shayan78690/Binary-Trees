/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            map.put(inorder[i], i);
        }
        TreeNode root = buildTree(inorder, 0, inorder.length - 1, postorder, postorder.length - 1, map);
        return root;
    }

    public TreeNode buildTree(int inorder[], int inStart, int inEnd, int postorder[], int postStart,
            HashMap<Integer, Integer> map) {
        if (inStart > inEnd || postStart < 0) {
            return null;
        }
        TreeNode root = new TreeNode(postorder[postStart]);
        int inRoot = map.get(root.val);
        int numsRight = inEnd - inRoot;

        root.right = buildTree(inorder, inRoot + 1, inEnd, postorder, postStart - 1, map);
        root.left = buildTree(inorder, inStart, inRoot - 1, postorder, postStart - numsRight - 1, map);
        return root;
    }
}
