/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    class Tuple {
        TreeNode node;
        int vertical;
        int level;

        Tuple(TreeNode node, int vertical, int level) {
            this.node = node;
            this.vertical = vertical;
            this.level = level;
        }
    }
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        Queue<Tuple> q = new LinkedList<>();
        TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map = new TreeMap<>();
        q.offer(new Tuple(root, 0, 0));

        while(!q.isEmpty()) {
            Tuple t = q.poll();
            TreeNode node = t.node;
            int vertical = t.vertical;
            int level = t.level;

            if(!map.containsKey(vertical)) {
                map.put(vertical, new TreeMap<>());
            }
            if(!map.get(vertical).containsKey(level)) {
                map.get(vertical).put(level, new PriorityQueue<>());
            }
            map.get(vertical).get(level).offer(node.val);

            if(node.left != null) {
                q.offer(new Tuple(node.left, vertical-1, level+1));
            }

            if(node.right != null) {
                q.offer(new Tuple(node.right, vertical+1, level+1));
            }
        }
        
    for (TreeMap<Integer, PriorityQueue<Integer>> levels : map.values()) {
    List<Integer> col = new ArrayList<>();
    for (PriorityQueue<Integer> nodes : levels.values()) {
        while (!nodes.isEmpty()) {
            col.add(nodes.poll());
        }
    }
    result.add(col);
    }       
    return result;
}
}
